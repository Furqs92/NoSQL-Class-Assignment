1. Change the price of the tickets to discount 100€ in all the flight from Madrid or London. 
Hint: The $inc operator increment a field with a value, if the value is negative, like in this case, it will decrement. 
	
	
db.tickets.update({ $or:[{"route.origin" : /MADRID/i}, {"route.origin":/LONDON/i}]}, {$inc: {"route.price":-100}}, {multi:true})
	
2. List the name of the passengers that has flown in March 2014. 
Hint: Use a regular expression to determine March 2014 
	
db.tickets.find({$and:[{"flightDate":/^03/},{"flightDate":/2014$/}]},{"_id": 0, "passenger.name": 1})
db.tickets.find({flightDate:/^03.*2014$/},{_id:0, "passenger.name":1})

3. How many tickets have been sold for airplanes with more than 300 seats and price more expensive than 1000€ but less than 2000€. 
	
db.tickets.find({"airplane.seats":{$gt:300}, "route.price":{$gt:1000, $lt:2000}}).count()

4. How much money has the company earned selling tickets but only for the routes that fly
from Madrid, Bombai and Manila?

##1 Total revenues for all three routes
db.tickets.aggregate([{$match : {$or:[{"route.origin":/MADRID/i},{"route.origin":/BOMBAY/i},{"route.origin":/MANILA/i}]}},{$group:{_id:null, revenues:{$sum:"$route.price"}}}])

##2 Revenues per routes
db.tickets.aggregate([{$match: {"route.origin":{$in: ["Madrid", "Bombay", "Manila"]}}}, {$group: {"_id": "$route.origin", revenue_per_route: {$sum: "$route.price"}}}])

5. Remove the tickets for passenger that contains the name SALLY (case insensitive), for
flights that cost more than 500 but less than 600 and that the origin is London or Madrid.
db.tickets.remove({"passenger.name":/SALLY/i,"route.price":{$gt:500, $lt:600},$or:[{"route.origin":"London"},{"route.origin":"Madrid"}]},{multi:true})
